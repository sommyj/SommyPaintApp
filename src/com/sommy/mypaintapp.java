/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sommy;

/**
 *
 * @author somto
 */
import static com.sun.org.apache.bcel.internal.util.SecuritySupport.getResourceAsStream;
import java.awt.AWTException;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;

        
public class mypaintapp extends javax.swing.JFrame /*implements Runnable*/ {

    /**
     * Creates new form mypaintapp
     */
   
//initiating Graphic class    
Graphics g;

//initiating operations
int initOP= 0;
int lineOP= 1;
int rectOP= 2;
int ovalOP= 3;
int triOP= 4;
int pentOP= 5;
int fRectOP= 6;
int fOvalOP= 7;
int fTriOP= 8;
int fPentOP= 9;
int eraserOP= 10;
int clearOP= 11;
//ImageIcon logo;

//defining color
Color lineColor;
Color fillColor;

//initializing user define color
int userRed= 255;
int userGreen= 255;
int userBlue= 255;

//initializing the previous co-ordiates
int previousX= 0;
int previousY= 0;

//initializing the current co-ordiates
int currentX= 0;
int currentY= 0;

//initializing height of the rectangle & oval
int height= 0;
int width= 0;

int[] x1= {0,0,0};
int[] y1= {0,0,0};
//initializing the drag value
boolean lineDrag= false;
boolean rectDrag= false;
boolean ovalDrag= false;
boolean triDrag= false;
boolean pentDrag= false;
boolean fRectDrag= false;
boolean fOvalDrag= false;
boolean fTriDrag= false;
boolean fPentDrag= false;
boolean eraserDrag= false;

Calendar cal;
        Date date;
        SimpleDateFormat sdf;
        
Point startDrag, endDrag,midPoint;
Thread t=null;
String tName= "draw";
String time= "me";
BufferedImage img;
FileDialog fd;
//javax.swing.JLabel lab= new javax.swing.JLabel();
Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image image = toolkit.getImage(getClass().getResource("/com/sommy/pix/cursor eraser.png"));

    public mypaintapp() {
        initComponents();
         
        this.setIconImage(new ImageIcon("/com/sommy/pix/painticon.png").getImage());
//        setIconImage(Toolkit.getDefaultToolkit().getImage("/com/sommy/pix/painticon.png"));
//
//String imagePath = "/com/sommy/pix/painticon.png";
//InputStream imgStream = getClass().getResourceAsStream(imagePath);
//BufferedImage myImg = null;
//    try {
//        myImg = ImageIO.read(imgStream);
//    } catch (IOException ex) {
//        Logger.getLogger(mypaintapp.class.getName()).log(Level.SEVERE, null, ex);
//    }
// setIconImage(myImg);

//         Runnable r = new Runnable(){             
//@Override
//      public void run(){
//    while(true){
//     panelDraw.getGraphics(); 
//try {
//        t.sleep(2000);
//    
//} catch (InterruptedException ex) {
//    Logger.getLogger(mypaintapp.class.getName()).log(Level.SEVERE, null, ex);
//}
//            }
//           
//      }
// };
//t=new Thread(r);
//      t.start();
        texRed.setText(String.valueOf(userRed));
        texGreen.setText(String.valueOf(userGreen));
        texBlue.setText(String.valueOf(userBlue));
        
        this.setLocationRelativeTo(null);
         
        
     /* panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon
            (getClass().getResource("/com/sommy/pix/cursor eraser.png")).getImage(),
            new Point(panelDraw.getX(),panelDraw.getY()),""));*/
  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTitle = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        panelCtrl = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        btnSave = new javax.swing.JButton();
        btnLine = new javax.swing.JButton();
        btnRect = new javax.swing.JButton();
        btnCircle = new javax.swing.JButton();
        btnTriangle = new javax.swing.JButton();
        btnPentagon = new javax.swing.JButton();
        btnFillRect = new javax.swing.JButton();
        btnFillCircle = new javax.swing.JButton();
        btnFillTri = new javax.swing.JButton();
        btnFillPent = new javax.swing.JButton();
        btnEraser = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        texTool = new javax.swing.JTextField();
        btnLineColor = new javax.swing.JButton();
        btnFillColor = new javax.swing.JButton();
        labLineColor = new javax.swing.JLabel();
        labFillColor = new javax.swing.JLabel();
        btnBlack = new javax.swing.JButton();
        btnOrange = new javax.swing.JButton();
        btnBlue = new javax.swing.JButton();
        btnGray = new javax.swing.JButton();
        btnRed = new javax.swing.JButton();
        btnPink = new javax.swing.JButton();
        btnWhite = new javax.swing.JButton();
        btnGreen = new javax.swing.JButton();
        btnYellow = new javax.swing.JButton();
        adjustRed = new javax.swing.JScrollBar();
        adjustGreen = new javax.swing.JScrollBar();
        adjustBlue = new javax.swing.JScrollBar();
        btnUDColor = new javax.swing.JButton();
        texRed = new javax.swing.JTextField();
        texGreen = new javax.swing.JTextField();
        texBlue = new javax.swing.JTextField();
        labTool = new javax.swing.JLabel();
        loadBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        panelDraw = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("sommyj paint app");

        panelTitle.setBackground(new java.awt.Color(153, 0, 102));

        Title.setBackground(new java.awt.Color(204, 204, 204));
        Title.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        Title.setForeground(new java.awt.Color(204, 204, 204));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("My Paint Application");

        panelCtrl.setBackground(new java.awt.Color(0, 0, 0));
        panelCtrl.setPreferredSize(new java.awt.Dimension(1167, 200));
        panelCtrl.setLayout(null);
        panelCtrl.add(jSeparator1);
        jSeparator1.setBounds(0, 179, 1167, 2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/save.jpg"))); // NOI18N
        btnSave.setToolTipText("Save image");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panelCtrl.add(btnSave);
        btnSave.setBounds(0, 0, 47, 33);

        btnLine.setBackground(new java.awt.Color(255, 255, 255));
        btnLine.setForeground(new java.awt.Color(255, 255, 255));
        btnLine.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/pen3.png"))); // NOI18N
        btnLine.setToolTipText("Line");
        btnLine.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineActionPerformed(evt);
            }
        });
        panelCtrl.add(btnLine);
        btnLine.setBounds(0, 50, 60, 40);

        btnRect.setBackground(new java.awt.Color(255, 255, 255));
        btnRect.setForeground(new java.awt.Color(255, 255, 255));
        btnRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/rect.png"))); // NOI18N
        btnRect.setToolTipText("Rectangle");
        btnRect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectActionPerformed(evt);
            }
        });
        panelCtrl.add(btnRect);
        btnRect.setBounds(60, 50, 60, 40);

        btnCircle.setBackground(new java.awt.Color(255, 255, 255));
        btnCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/circle.png"))); // NOI18N
        btnCircle.setToolTipText("Circle");
        btnCircle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCircleActionPerformed(evt);
            }
        });
        panelCtrl.add(btnCircle);
        btnCircle.setBounds(120, 50, 60, 40);

        btnTriangle.setBackground(new java.awt.Color(255, 255, 255));
        btnTriangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/Triangle.png"))); // NOI18N
        btnTriangle.setToolTipText("Fill Rectangle");
        btnTriangle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnTriangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTriangleActionPerformed(evt);
            }
        });
        panelCtrl.add(btnTriangle);
        btnTriangle.setBounds(180, 50, 60, 40);

        btnPentagon.setBackground(new java.awt.Color(255, 255, 255));
        btnPentagon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/Pentagon.png"))); // NOI18N
        btnPentagon.setToolTipText("Fill Rectangle");
        btnPentagon.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPentagon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPentagonActionPerformed(evt);
            }
        });
        panelCtrl.add(btnPentagon);
        btnPentagon.setBounds(240, 50, 60, 40);

        btnFillRect.setBackground(new java.awt.Color(255, 255, 255));
        btnFillRect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/fillrect.png"))); // NOI18N
        btnFillRect.setToolTipText("Fill Rectangle");
        btnFillRect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFillRect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillRectActionPerformed(evt);
            }
        });
        panelCtrl.add(btnFillRect);
        btnFillRect.setBounds(0, 90, 60, 41);

        btnFillCircle.setBackground(new java.awt.Color(255, 255, 255));
        btnFillCircle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/fillcircle.png"))); // NOI18N
        btnFillCircle.setToolTipText("Fill Circle");
        btnFillCircle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFillCircle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillCircleActionPerformed(evt);
            }
        });
        panelCtrl.add(btnFillCircle);
        btnFillCircle.setBounds(60, 90, 60, 41);

        btnFillTri.setBackground(new java.awt.Color(255, 255, 255));
        btnFillTri.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/FillTriangle.png"))); // NOI18N
        btnFillTri.setToolTipText("Fill Rectangle");
        btnFillTri.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFillTri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillTriActionPerformed(evt);
            }
        });
        panelCtrl.add(btnFillTri);
        btnFillTri.setBounds(120, 90, 60, 41);

        btnFillPent.setBackground(new java.awt.Color(255, 255, 255));
        btnFillPent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/FillPentagon.png"))); // NOI18N
        btnFillPent.setToolTipText("Fill Rectangle");
        btnFillPent.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFillPent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillPentActionPerformed(evt);
            }
        });
        panelCtrl.add(btnFillPent);
        btnFillPent.setBounds(180, 90, 60, 41);

        btnEraser.setBackground(new java.awt.Color(255, 255, 255));
        btnEraser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/eraser2.png"))); // NOI18N
        btnEraser.setToolTipText("Eraser");
        btnEraser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEraser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEraserActionPerformed(evt);
            }
        });
        panelCtrl.add(btnEraser);
        btnEraser.setBounds(240, 90, 60, 41);

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/clear.jpg"))); // NOI18N
        btnClear.setToolTipText("Clear ");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        panelCtrl.add(btnClear);
        btnClear.setBounds(300, 90, 60, 41);

        texTool.setEditable(false);
        panelCtrl.add(texTool);
        texTool.setBounds(450, 50, 87, 30);

        btnLineColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineColorActionPerformed(evt);
            }
        });
        panelCtrl.add(btnLineColor);
        btnLineColor.setBounds(410, 90, 60, 40);

        btnFillColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFillColorActionPerformed(evt);
            }
        });
        panelCtrl.add(btnFillColor);
        btnFillColor.setBounds(480, 90, 60, 40);

        labLineColor.setForeground(new java.awt.Color(255, 255, 255));
        labLineColor.setText("Line Color");
        panelCtrl.add(labLineColor);
        labLineColor.setBounds(410, 140, 60, 15);

        labFillColor.setForeground(new java.awt.Color(255, 255, 255));
        labFillColor.setText("Fill Color");
        panelCtrl.add(labFillColor);
        labFillColor.setBounds(480, 140, 60, 15);

        btnBlack.setBackground(new java.awt.Color(0, 0, 0));
        btnBlack.setToolTipText("Black");
        btnBlack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBlack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlackActionPerformed(evt);
            }
        });
        panelCtrl.add(btnBlack);
        btnBlack.setBounds(600, 50, 61, 40);

        btnOrange.setBackground(java.awt.Color.orange);
        btnOrange.setToolTipText("Orange");
        btnOrange.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnOrange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrangeActionPerformed(evt);
            }
        });
        panelCtrl.add(btnOrange);
        btnOrange.setBounds(600, 90, 61, 40);

        btnBlue.setBackground(new java.awt.Color(0, 0, 255));
        btnBlue.setToolTipText("Blue");
        btnBlue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBlueActionPerformed(evt);
            }
        });
        panelCtrl.add(btnBlue);
        btnBlue.setBounds(660, 50, 60, 40);

        btnGray.setBackground(java.awt.Color.gray);
        btnGray.setToolTipText("Gray");
        btnGray.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGray.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrayActionPerformed(evt);
            }
        });
        panelCtrl.add(btnGray);
        btnGray.setBounds(660, 90, 60, 40);

        btnRed.setBackground(new java.awt.Color(255, 0, 0));
        btnRed.setToolTipText("Red");
        btnRed.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedActionPerformed(evt);
            }
        });
        panelCtrl.add(btnRed);
        btnRed.setBounds(720, 50, 60, 40);

        btnPink.setBackground(java.awt.Color.pink);
        btnPink.setToolTipText("Pink");
        btnPink.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPinkActionPerformed(evt);
            }
        });
        panelCtrl.add(btnPink);
        btnPink.setBounds(720, 90, 60, 40);

        btnWhite.setBackground(new java.awt.Color(255, 255, 255));
        btnWhite.setToolTipText("White");
        btnWhite.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnWhite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWhiteActionPerformed(evt);
            }
        });
        panelCtrl.add(btnWhite);
        btnWhite.setBounds(780, 90, 60, 40);

        btnGreen.setBackground(java.awt.Color.green);
        btnGreen.setToolTipText("Green");
        btnGreen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGreenActionPerformed(evt);
            }
        });
        panelCtrl.add(btnGreen);
        btnGreen.setBounds(780, 50, 60, 40);

        btnYellow.setBackground(new java.awt.Color(255, 255, 0));
        btnYellow.setToolTipText("Yellow");
        btnYellow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnYellow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYellowActionPerformed(evt);
            }
        });
        panelCtrl.add(btnYellow);
        btnYellow.setBounds(840, 50, 60, 40);

        adjustRed.setMaximum(255);
        adjustRed.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        adjustRed.setVisibleAmount(0);
        adjustRed.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                adjustRedAdjustmentValueChanged(evt);
            }
        });
        panelCtrl.add(adjustRed);
        adjustRed.setBounds(960, 30, 300, 30);

        adjustGreen.setMaximum(255);
        adjustGreen.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        adjustGreen.setVisibleAmount(0);
        adjustGreen.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                adjustGreenAdjustmentValueChanged(evt);
            }
        });
        panelCtrl.add(adjustGreen);
        adjustGreen.setBounds(960, 70, 300, 30);

        adjustBlue.setMaximum(255);
        adjustBlue.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        adjustBlue.setVisibleAmount(0);
        adjustBlue.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                adjustBlueAdjustmentValueChanged(evt);
            }
        });
        panelCtrl.add(adjustBlue);
        adjustBlue.setBounds(960, 110, 300, 30);

        btnUDColor.setToolTipText("User-Defined Color");
        btnUDColor.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUDColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUDColorActionPerformed(evt);
            }
        });
        panelCtrl.add(btnUDColor);
        btnUDColor.setBounds(1090, 140, 58, 31);

        texRed.setText("jTextField1");
        texRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texRedActionPerformed(evt);
            }
        });
        panelCtrl.add(texRed);
        texRed.setBounds(1270, 30, 70, 30);

        texGreen.setText("jTextField2");
        texGreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texGreenActionPerformed(evt);
            }
        });
        panelCtrl.add(texGreen);
        texGreen.setBounds(1270, 70, 70, 30);

        texBlue.setText("jTextField3");
        texBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                texBlueActionPerformed(evt);
            }
        });
        panelCtrl.add(texBlue);
        texBlue.setBounds(1270, 110, 70, 30);

        labTool.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        labTool.setForeground(new java.awt.Color(255, 255, 255));
        labTool.setText("Tool :");
        panelCtrl.add(labTool);
        labTool.setBounds(410, 50, 45, 22);

        loadBtn.setBackground(new java.awt.Color(255, 255, 255));
        loadBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        loadBtn.setText("Load");
        loadBtn.setMargin(new java.awt.Insets(2, 3, 2, 3));
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });
        panelCtrl.add(loadBtn);
        loadBtn.setBounds(60, 0, 90, 33);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/sommy/pix/pb4.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setPreferredSize(new java.awt.Dimension(1438, 175));
        panelCtrl.add(jLabel1);
        jLabel1.setBounds(0, 0, 1370, 175);

        javax.swing.GroupLayout panelTitleLayout = new javax.swing.GroupLayout(panelTitle);
        panelTitle.setLayout(panelTitleLayout);
        panelTitleLayout.setHorizontalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelCtrl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE)
            .addComponent(Title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelTitleLayout.setVerticalGroup(
            panelTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTitleLayout.createSequentialGroup()
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelCtrl, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        panelDraw.setForeground(new java.awt.Color(153, 153, 153));
        panelDraw.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelDrawMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                panelDrawMouseMoved(evt);
            }
        });
        panelDraw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                panelDrawMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelDrawMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                panelDrawMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout panelDrawLayout = new javax.swing.GroupLayout(panelDraw);
        panelDraw.setLayout(panelDrawLayout);
        panelDrawLayout.setHorizontalGroup(
            panelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelDrawLayout.setVerticalGroup(
            panelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelDraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panelDraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
       
    private void btnRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectActionPerformed
        // TODO add your handling code here:
        initOP = rectOP;
        rectDrag= true;
        texTool.setText("Rectangle");
    }//GEN-LAST:event_btnRectActionPerformed

    private void btnCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCircleActionPerformed
        // TODO add your handling code here:
        initOP = ovalOP;
        ovalDrag= true;
        texTool.setText("Oval");
    }//GEN-LAST:event_btnCircleActionPerformed

    private void btnLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineActionPerformed
        // TODO add your handling code here:
        initOP = lineOP;
        lineDrag= true;
        texTool.setText("Line");
        /*panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon
        (getClass().getResource("/com/sommy/pix/cursor eraser.png")).getImage(),
            new Point(panelDraw.getX(),panelDraw.getY()),"eraser"));*/
    }//GEN-LAST:event_btnLineActionPerformed

    private void btnFillRectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillRectActionPerformed
        // TODO add your handling code here:
        initOP = fRectOP;
        fRectDrag = true;
        texTool.setText("Fill Rectangle");
    }//GEN-LAST:event_btnFillRectActionPerformed

    private void btnFillCircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillCircleActionPerformed
        // TODO add your handling code here:
        initOP = fOvalOP;
        fOvalDrag = true;
        texTool.setText("Fill Circle");
    }//GEN-LAST:event_btnFillCircleActionPerformed

    private void btnEraserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEraserActionPerformed
        // TODO add your handling code here:
        initOP = eraserOP;
        eraserDrag = true;
        texTool.setText("Eraser");
        
       
 
//      panelDraw.setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
//      panelDraw.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
 
       /*panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon
        (getClass().getResource("/com/sommy/pix/cursor eraser.png")).getImage(),
            new Point(panelDraw.getX(),panelDraw.getY()),""));*/
       
//       Cursor c = toolkit.createCustomCursor(image, new Point(panelDraw.getX(),panelDraw.getY()), "eraser");
//  panelDraw.setCursor(c);
 
    }//GEN-LAST:event_btnEraserActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
       g= panelDraw.getGraphics();
        g.clearRect(0, 0,panelDraw.getBounds().width,panelDraw.getBounds().height);
        texTool.setText("Clear Panel");
//        panelDraw.setForeground(panelDraw.getBackground());
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnBlackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlackActionPerformed
        // TODO add your handling code here:
        lineColor= new Color(0,0,0);
        fillColor= new Color(0,0,0);
       
        btnLineColor.setBackground(new Color(0,0,0));
        btnFillColor.setBackground(new Color(0,0,0));
        
        
    }//GEN-LAST:event_btnBlackActionPerformed

    private void btnLineColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLineColorActionPerformed

    private void btnFillColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnFillColorActionPerformed

    private void btnBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlueActionPerformed
        // TODO add your handling code here:
        lineColor= new Color(0,0,255);
        fillColor= new Color(0,0,255);
       
        btnLineColor.setBackground(new Color(0,0,255));
        btnFillColor.setBackground(new Color(0,0,255));
        
    }//GEN-LAST:event_btnBlueActionPerformed

    private void btnRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedActionPerformed
        // TODO add your handling code here:
        lineColor= new Color(255,0,0);
        fillColor= new Color(255,0,0);
       
        btnLineColor.setBackground(new Color(255,0,0));
        btnFillColor.setBackground(new Color(255,0,0));
    }//GEN-LAST:event_btnRedActionPerformed

    private void btnGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGreenActionPerformed
        // TODO add your handling code here:
        lineColor= Color.GREEN;
        fillColor= Color.GREEN;
       
        btnLineColor.setBackground(Color.GREEN);
        btnFillColor.setBackground(Color.GREEN);
    }//GEN-LAST:event_btnGreenActionPerformed

    private void btnYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYellowActionPerformed
        // TODO add your handling code here:
        lineColor= Color.YELLOW;
        fillColor= Color.YELLOW;
       
        btnLineColor.setBackground(Color.YELLOW);
        btnFillColor.setBackground(Color.YELLOW);
    }//GEN-LAST:event_btnYellowActionPerformed

    private void btnOrangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrangeActionPerformed
        // TODO add your handling code here:
        lineColor= Color.ORANGE;
        fillColor= Color.ORANGE;
       
        btnLineColor.setBackground(Color.ORANGE);
        btnFillColor.setBackground(Color.ORANGE);
    }//GEN-LAST:event_btnOrangeActionPerformed

    private void btnGrayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrayActionPerformed
        // TODO add your handling code here:
        lineColor= Color.GRAY;
        fillColor= Color.GRAY;
       
        btnLineColor.setBackground(Color.GRAY);
        btnFillColor.setBackground(Color.GRAY);
    }//GEN-LAST:event_btnGrayActionPerformed

    private void btnPinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPinkActionPerformed
        // TODO add your handling code here:
        lineColor= Color.PINK;
        fillColor= Color.PINK;
       
        btnLineColor.setBackground(Color.PINK);
        btnFillColor.setBackground(Color.PINK);
    }//GEN-LAST:event_btnPinkActionPerformed

    private void btnWhiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWhiteActionPerformed
        // TODO add your handling code here:
        lineColor= new Color(255,255,255);
        fillColor= new Color(255,255,255);
       
        btnLineColor.setBackground(new Color(255,255,255));
        btnFillColor.setBackground(new Color(255,255,255));
    }//GEN-LAST:event_btnWhiteActionPerformed

    private void btnUDColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUDColorActionPerformed
        // TODO add your handling code here:
        lineColor= new Color(userRed,userGreen,userBlue);
        fillColor= new Color(userRed,userGreen,userBlue);
   
        btnLineColor.setBackground(new Color(userRed,userGreen,userBlue));
        btnFillColor.setBackground(new Color(userRed,userGreen,userBlue));
    }//GEN-LAST:event_btnUDColorActionPerformed

    private void adjustGreenAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_adjustGreenAdjustmentValueChanged
        // TODO add your handling code here:
        userGreen=adjustGreen.getValue();
        texGreen.setText(Integer.toString(userGreen));
        btnUDColor.setBackground(new Color(userRed,userGreen,userBlue));
        if((btnLineColor.getBackground()!= btnUDColor.getBackground())&&(btnFillColor.getBackground()!= btnUDColor.getBackground())){
        lineColor= new Color(userRed,userGreen,userBlue);
        fillColor= new Color(userRed,userGreen,userBlue);
        btnLineColor.setBackground(new Color(userRed,userGreen,userBlue));
        btnFillColor.setBackground(new Color(userRed,userGreen,userBlue));
        }
    }//GEN-LAST:event_adjustGreenAdjustmentValueChanged

    private void adjustRedAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_adjustRedAdjustmentValueChanged
        // TODO add your handling code here:
        userRed=adjustRed.getValue();
        texRed.setText(String.valueOf(userRed));
        btnUDColor.setBackground(new Color(userRed,userGreen,userBlue));
        if((btnLineColor.getBackground()!= btnUDColor.getBackground())&&(btnFillColor.getBackground()!= btnUDColor.getBackground())){
        lineColor= new Color(userRed,userGreen,userBlue);
        fillColor= new Color(userRed,userGreen,userBlue);
        btnLineColor.setBackground(new Color(userRed,userGreen,userBlue));
        btnFillColor.setBackground(new Color(userRed,userGreen,userBlue));
        }
    }//GEN-LAST:event_adjustRedAdjustmentValueChanged

    private void adjustBlueAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_adjustBlueAdjustmentValueChanged
        // TODO add your handling code here:
        userBlue=adjustBlue.getValue();
        texBlue.setText(Integer.toString(userBlue));
        btnUDColor.setBackground(new Color(userRed,userGreen,userBlue));
        if((btnLineColor.getBackground()!= btnUDColor.getBackground())||(btnFillColor.getBackground()!= btnUDColor.getBackground())){
        
            lineColor= new Color(userRed,userGreen,userBlue);
            fillColor= new Color(userRed,userGreen,userBlue);
            btnLineColor.setBackground(new Color(userRed,userGreen,userBlue));
        btnFillColor.setBackground(new Color(userRed,userGreen,userBlue));
    }
    }//GEN-LAST:event_adjustBlueAdjustmentValueChanged

    private void texRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texRedActionPerformed
        // TODO add your handling code here:
        int red = Integer.parseInt(texRed.getText());
        adjustRed.setValue(red);
    }//GEN-LAST:event_texRedActionPerformed

    private void texGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texGreenActionPerformed
        // TODO add your handling code here:
        int green = Integer.parseInt(texGreen.getText());
        adjustGreen.setValue(green);
    }//GEN-LAST:event_texGreenActionPerformed

    private void texBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_texBlueActionPerformed
        // TODO add your handling code here:
        int blue = Integer.parseInt(texBlue.getText());
        adjustBlue.setValue(blue);
    }//GEN-LAST:event_texBlueActionPerformed

    private void btnFillTriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillTriActionPerformed
        // TODO add your handling code here:
        initOP = fTriOP;
        fTriDrag = true;
        texTool.setText("Fill Triangle");
    }//GEN-LAST:event_btnFillTriActionPerformed

    private void btnTriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriangleActionPerformed
        // TODO add your handling code here:
         initOP = triOP;
        triDrag = true;
        texTool.setText("Triangle");
    }//GEN-LAST:event_btnTriangleActionPerformed

    private void btnPentagonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPentagonActionPerformed
        // TODO add your handling code here:
        initOP = pentOP;
        pentDrag = true;
        texTool.setText("Pentagon");
    }//GEN-LAST:event_btnPentagonActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try{
        BufferedImage pic = new Robot().createScreenCapture(new Rectangle(panelDraw.getLocationOnScreen().x,panelDraw.getLocationOnScreen().y,panelDraw.getWidth(),panelDraw.getHeight()));
        FileDialog fd= new FileDialog(this, "sommyj paint", FileDialog.SAVE);
        fd.setDirectory("C:\\Users\\somto\\Pictures");
        fd.setFile("paint1.png");
        fd.setVisible(true);
        if (fd.getFile() != null){
            
            File file= new File(fd.getDirectory()+fd.getFile());
            try{
             if(!file.exists()){
             file.createNewFile();
             ImageIO.write(pic, "png",file);
            }
             else{
                ImageIO.write(pic, "png",file);
            }
            } catch (IOException ex) {
                Logger.getLogger(mypaintapp.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
       /*else if(fd.getFile() == null){
           fd.setFile("sommyj.png");
          fd.setVisible(true);
       }*/
        
        
        } catch (AWTException ex) {
        Logger.getLogger(mypaintapp.class.getName()).log(Level.SEVERE, null, ex);
    }
//        JFileChooser c= new JFileChooser();
//        int choose= c.showOpenDialog(mypaintapp.this);
//        if(choose == JFileChooser.APPROVE_OPTION){
//         File file= c.getSelectedFile();
         // filename.setText(c.getSelectedFile().getName());
        //dir.setText(c.getCurrentDirectory().toString());
//        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnFillPentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFillPentActionPerformed
        // TODO add your handling code here:
        initOP=fPentOP;
        fPentDrag =true;
         texTool.setText("Fill Pentagon");
    }//GEN-LAST:event_btnFillPentActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        
        fd= new FileDialog(this, "sommyj paint", FileDialog.LOAD);
        fd.setDirectory("C:\\Users\\somto\\Pictures");
        fd.setFile("Paint1.png");
        fd.getFile();
        fd.setVisible(true);
        if (fd.getFile() != null){
            
            File file= new File(fd.getDirectory()+fd.getFile());
          
    try {
img = ImageIO.read(file);
    } catch (IOException ex) {
        Logger.getLogger(mypaintapp.class.getName()).log(Level.SEVERE, null, ex);
    }
       
            }
          
            g= panelDraw.getGraphics();
       g.drawImage(img, 0, 0, fd);
    }//GEN-LAST:event_loadBtnActionPerformed
//public void paint(Graphics g) {
////             super.paintComponent(g);
//       g.drawImage(img, panelDraw.getX(),panelDraw.getY(), fd);
//        
////       repaint();
//       }
    private void panelDrawMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseReleased
        // TODO add your handling code here:
        if(lineDrag=true){
            lineDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;

        }

        if(rectDrag=true){
            rectDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
            width = 0;
            height = 0;

        }

        if(ovalDrag=true){
            ovalDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
            width = 0;
            height = 0;
        }
        if(triDrag=true){
            triDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
            /*  int[] x= {currentX, previousX, previousX};
            int[] y= {currentY, currentY, previousY};
            previousX = 0;
            previousY = 0;

            g.drawPolygon(x, y, 3);*/
        }
        if(pentDrag=true){
            pentDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
        }
        if(fRectDrag=true){
            fRectDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
            width = 0;
            height = 0;
        }
        if(fOvalDrag=true){
            fOvalDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
            width = 0;
            height = 0;
        }
        if(fTriDrag=true){
            fTriDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
        }
        if(fPentDrag=true){
            fPentDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
        }
        if(eraserDrag=true){
            eraserDrag=false;
            currentX = evt.getX();
            currentY = evt.getY();
            previousX = currentX;
            previousY = currentY;
        }
    }//GEN-LAST:event_panelDrawMouseReleased

    private void panelDrawMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMousePressed
        // TODO add your handling code here:
        if(initOP==1){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==2){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==3){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==4){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==5){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==6){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==7){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==8){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==9){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==10){
            previousX = evt.getX();
            previousY = evt.getY();
        }
        if(initOP==11){
            previousX = evt.getX();
            previousY = evt.getY();
        }
    }//GEN-LAST:event_panelDrawMousePressed

    private void panelDrawMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_panelDrawMouseEntered

    private void panelDrawMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseMoved
        // TODO add your handling code here:
        /*if(eraserDrag=true){

            panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon
                (getClass().getResource("/com/sommy/pix/cursor eraser.png")).getImage(),
                new Point(panelDraw.getX(),panelDraw.getY()),"eraser"));

        }*/
    }//GEN-LAST:event_panelDrawMouseMoved

    private void panelDrawMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseDragged
        // TODO add your handling code here:
        if(initOP == 1){
            if(lineDrag= true){
                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                g.setColor(lineColor);
                g.drawLine(previousX, previousY, currentX, currentY);
                previousX= currentX;
                previousY= currentY;

            }

        }
        if(initOP == 2){
            if(rectDrag= true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                g.drawRect(previousX, previousY, width, height);

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                g.setColor(lineColor);
                height= currentY - previousY;
                width= currentX - previousX;
                g.drawRect(previousX, previousY, width, height);

            }
        }
        if(initOP == 3){
            if(ovalDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                g.drawOval(previousX, previousY, width, height);

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                g.setColor(lineColor);
                height= currentY - previousY;
                width= currentX - previousX;
                g.drawOval(previousX, previousY, width, height);

            }
        }
        if(initOP == 4){
            if(triDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                for(int i=0; i<0; i++){
                    int[] x= {currentX-i, previousX, currentX+i};
                    int[] y= {currentY, previousY-i, currentY};
                    g.setXORMode(panelDraw.getBackground());
                    g.drawPolygon(x, y, 3);}
                previousX= currentX;
                previousY= currentY;

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                //          g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);

                for(int i=0; i< 200; i++){
                    int[] x1= {currentX-i, previousX, currentX+i};
                    int[] y1= {currentY, previousY-i, currentY};
                    g.setXORMode(panelDraw.getBackground());
                    g.drawPolygon(x1, y1, 3);
                    previousX= currentX;
                    previousY= currentY;
                }
            }
        }

        if(initOP == 5){
            if(pentDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                for(int i=0; i<0; i++){
                    int[] x= {currentX-i,currentX-i-i, previousX, currentX+i+i,currentX+i};
                    int[] y= {currentY,currentY-i, currentY-i-i,currentY-i, currentY};
                    g.setXORMode(panelDraw.getBackground());
                    g.drawPolygon(x, y, 5);}
                previousX= currentX;
                previousY= currentY;

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                //          g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);

                for(int i=0; i< 200; i++){
                    int[] x1= {currentX-i,currentX-i-i, previousX, currentX+i+i,currentX+i};
                    int[] y1= {currentY,currentY-i, currentY-i-i,currentY-i, currentY};
                    g.setXORMode(panelDraw.getBackground());
                    g.drawPolygon(x1, y1, 5);
                    previousX= currentX;
                    previousY= currentY;
                }
            }
        }

        if(initOP == 6){
            if(fRectDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(fillColor);
                g.fillRect(previousX, previousY, width, height);

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                g.setColor(fillColor);
                height= currentY- previousY;
                width= currentX- previousX;
                g.fillRect(previousX, previousY, width, height);
            }
        }

        if(initOP == 7){
            if(fOvalDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(fillColor);
                g.fillOval(previousX, previousY, width, height);

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                g.setColor(fillColor);
                width= currentX - previousX;
                height= currentY - previousY;
                g.fillOval(previousX, previousY, width, height);

            }
        }
        if(initOP == 8){
            if(fTriDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                //         int[] x1= {previousX, previousX, previousX};
                //         int[] y1= {previousY, previousY, previousY};
                g.fillPolygon(x1, y1, 3);

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                //          g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);

                for(int i=0; i< 200; i++){
                    int[] x1= {currentX-i, previousX, currentX+i};
                    int[] y1= {currentY, currentY-i, currentY};
                    g.fillPolygon(x1, y1, 3);
                    previousX= currentX;
                    previousY= currentY;
                }
            }
        }

        if(initOP == 9){
            if(fPentDrag = true){

                g= panelDraw.getGraphics();
                g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);
                for(int i=0; i<0; i++){
                    int[] x= {currentX-i,currentX-i-i, previousX, currentX+i+i,currentX+i};
                    int[] y= {currentY,currentY-i, currentY-i-i,currentY-i, currentY};
                    //         g.setXORMode(panelDraw.getBackground());
                    g.fillPolygon(x, y, 5);}
                previousX= currentX;
                previousY= currentY;

                currentX = evt.getX();
                currentY = evt.getY();
                g= panelDraw.getGraphics();
                //          g.setXORMode(panelDraw.getBackground());
                g.setColor(lineColor);

                for(int i=0; i< 200; i++){
                    int[] x1= {currentX-i,currentX-i-i, previousX, currentX+i+i,currentX+i};
                    int[] y1= {currentY,currentY-i, currentY-i-i,currentY-i, currentY};
                    //         g.setXORMode(panelDraw.getBackground());
                    g.fillPolygon(x1, y1, 5);
                    previousX= currentX;
                    previousY= currentY;
                }
            }
        }

        if(initOP == 10){
            if(eraserDrag=true){
                g= panelDraw.getGraphics();

                currentX= evt.getX();
                currentY= evt.getY();

                g.clearRect(currentX, currentY, 10,10);

                /* panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(new ImageIcon
                    (getClass().getResource("/com/sommy/pix/cursor eraser.png")).getImage(),
                    new Point(panelDraw.getX(),panelDraw.getY()),"eraser"));*/

        }
        }
    }//GEN-LAST:event_panelDrawMouseDragged
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mypaintapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mypaintapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mypaintapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mypaintapp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mypaintapp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JScrollBar adjustBlue;
    private javax.swing.JScrollBar adjustGreen;
    private javax.swing.JScrollBar adjustRed;
    private javax.swing.JButton btnBlack;
    private javax.swing.JButton btnBlue;
    private javax.swing.JButton btnCircle;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnEraser;
    private javax.swing.JButton btnFillCircle;
    private javax.swing.JButton btnFillColor;
    private javax.swing.JButton btnFillPent;
    private javax.swing.JButton btnFillRect;
    private javax.swing.JButton btnFillTri;
    private javax.swing.JButton btnGray;
    private javax.swing.JButton btnGreen;
    private javax.swing.JButton btnLine;
    private javax.swing.JButton btnLineColor;
    private javax.swing.JButton btnOrange;
    private javax.swing.JButton btnPentagon;
    private javax.swing.JButton btnPink;
    private javax.swing.JButton btnRect;
    private javax.swing.JButton btnRed;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTriangle;
    private javax.swing.JButton btnUDColor;
    private javax.swing.JButton btnWhite;
    private javax.swing.JButton btnYellow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labFillColor;
    private javax.swing.JLabel labLineColor;
    private javax.swing.JLabel labTool;
    private javax.swing.JButton loadBtn;
    private javax.swing.JPanel panelCtrl;
    private javax.swing.JPanel panelDraw;
    private javax.swing.JPanel panelTitle;
    private javax.swing.JTextField texBlue;
    private javax.swing.JTextField texGreen;
    private javax.swing.JTextField texRed;
    private javax.swing.JTextField texTool;
    // End of variables declaration//GEN-END:variables

    }
